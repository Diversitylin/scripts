#!/usr/bin/env python

"""
This script writes positions and forces from vasprun.xml to an 
xmol file

=== The XMOL file format ===

XMOL(XYZ) datafiles specify molecular geometries using a Cartesian coordinate
system. The XMOL(XYZ) format supports multi-step datasets. Each step is
represented by a two-line "header," followed by one line for each atom.

The first line of a step's header is the number of atoms in that step. This
integer may be preceded by whitespace; any- thing on the line after the
integer is ignored. The second line of the header leaves room for a
descriptive string. This line may be blank, or it may contain some information
pertinent to that particular step, but it must exist, and it must be just one
line long.

Each line of text describing a single atom must contain at least four fields
of information, separated by whitespace: the atom's type (a short string of
alphanumeric characters), and its x-, y-, and z-positions.  Optionally, extra
fields may be used to specify a charge for the atom, and/or a vector
associated with the atom.  If an input line contains five or eight fields, the
fifth field is interpreted as the atom's charge; otherwise, a charge of zero
is assumed. If an input line contains seven or eight fields, the last three
fields are interpreted as the components of a vector. These components should
be specified in angstroms.

"""

from optparse import OptionParser
parser = OptionParser( usage = "usage: %prog [options] FILE" ) 
(options, args) = parser.parse_args()

vasprun_file = 'vasprun.xml'
if len(args) > 0:
    vasprun_file = args[0]

# Scale the forces by this factor for visualization
force_scale_factor = 1.0

import numpy as np
from oppvasp.vasp.parsers import IterativeVasprunParser
from oppvasp import elements

parser = IterativeVasprunParser(vasprun_file)
traj = parser.get_all_trajectories()
pos = traj.positions
forces = traj.forces * force_scale_factor

atom_numbers = traj.atoms
atom_names = [elements[n]['symb'] for n in atom_numbers]
atom_types = set(atom_numbers) # A set is unordered. Can this cause issues?
atom_mult = [(at == atom_numbers).sum() for at in atom_types]

print "Number of atom types: %d" % (len(atom_types))
print "Multiplicities of these types: %s" % (' '.join(map(str,atom_mult)))
print "Total number of atoms: %d" % (len(atom_numbers))

for step_idx, (step_pos, step_forces) in enumerate(zip(pos, forces)):
    
    # Header line 1: Number of atoms
    print len(atom_numbers)
    # Header line 2: Description (empty)
    print "(description)"
    
    for atom_idx, (atom_name, atom_pos, atom_forces) in enumerate(zip(atom_names, step_pos, step_forces)):
        atom_pos = list(atom_pos)
        atom_forces = list(atom_forces)
        #atom_name = [atom_names[atom_no]]
        #atom_index = [atom_no+1]

        # Atom line:
        print "%s %12.9f %12.9f %12.9f %12.9f %12.9f %12.9f" % tuple([atom_name] + atom_pos + atom_forces)
    
#_RPBE 3.175080000 3.175080000 3.175080000 1 187.033888000 -39.102163000 0.000000000
#_RPBE 72.532860000 15.979690000 3.175080000 2 -179.703027000 39.516027000 -0.000001000
#_RPBE -33.749300000 -34.752700000 3.175080000 3 -7.332790000 -0.414542000 -0.000001000
#3
